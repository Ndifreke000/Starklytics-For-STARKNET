{"query": "
-- Create queries table CREATE TABLE queries (     id UUID DEFAULT gen_random_uuid() PRIMARY KEY,     created_at TIMESTAMPTZ DEFAULT NOW(),     updated_at TIMESTAMPTZ DEFAULT NOW(),     title TEXT NOT NULL,     description TEXT,     query_text TEXT NOT NULL,     creator_id UUID REFERENCES auth.users(id),     metadata JSONB DEFAULT '{}'::JSONB,     is_public BOOLEAN DEFAULT false,     last_run_at TIMESTAMPTZ,     favorite BOOLEAN DEFAULT false );  -- Enable RLS ALTER TABLE queries ENABLE ROW LEVEL SECURITY;  -- Policies CREATE POLICY \"Users can view their own queries\"     ON queries FOR SELECT     TO authenticated     USING (creator_id = auth.uid() OR is_public = true);  CREATE POLICY \"Users can insert their own queries\"     ON queries FOR INSERT     TO authenticated     WITH CHECK (creator_id = auth.uid());  CREATE POLICY \"Users can update their own queries\"     ON queries FOR UPDATE     TO authenticated     USING (creator_id = auth.uid());  CREATE POLICY \"Users can delete their own queries\"     ON queries FOR DELETE     TO authenticated     USING (creator_id = auth.uid());  -- Create query_results table for caching CREATE TABLE query_results (     id UUID DEFAULT gen_random_uuid() PRIMARY KEY,     created_at TIMESTAMPTZ DEFAULT NOW(),     query_id UUID REFERENCES queries(id) ON DELETE CASCADE,     results JSONB NOT NULL,     execution_time INTERVAL,     row_count INTEGER );  -- Enable RLS ALTER TABLE query_results ENABLE ROW LEVEL SECURITY;  -- Policies CREATE POLICY \"Users can view results of accessible queries\"     ON query_results FOR SELECT     TO authenticated     USING (         EXISTS (             SELECT 1 FROM queries             WHERE queries.id = query_results.query_id             AND (queries.creator_id = auth.uid() OR queries.is_public = true)         )     );  -- Create function to update updated_at CREATE OR REPLACE FUNCTION update_updated_at_column() RETURNS TRIGGER AS $$ BEGIN     NEW.updated_at = NOW();     RETURN NEW; END; $$ language 'plpgsql';  -- Create trigger for updating updated_at CREATE TRIGGER update_queries_updated_at     BEFORE UPDATE ON queries     FOR EACH ROW     EXECUTE FUNCTION update_updated_at_column(); "}
